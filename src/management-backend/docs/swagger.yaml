definitions:
  dto.CreateUserRequest:
    properties:
      email:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      phone:
        type: string
    required:
    - email
    - first_name
    - last_name
    - phone
    type: object
  dto.Error:
    properties:
      code:
        example: 400
        type: integer
      message:
        example: invalid request
        type: string
    type: object
  dto.ListUsersResponse:
    properties:
      pagination:
        $ref: '#/definitions/dto.Pagination'
      users:
        items:
          $ref: '#/definitions/dto.UserResponse'
        type: array
    type: object
  dto.LoginRequest:
    properties:
      captcha_token:
        type: string
      email:
        type: string
      password:
        type: string
    required:
    - captcha_token
    - email
    - password
    type: object
  dto.LoginResponse:
    properties:
      token:
        type: string
      user:
        $ref: '#/definitions/dto.UserResponse'
    type: object
  dto.Pagination:
    properties:
      limit:
        type: integer
      page:
        type: integer
      total:
        type: integer
    type: object
  dto.PlanResponse:
    properties:
      endDate:
        example: "2025-12-31"
        type: string
      id:
        example: plan_001
        type: string
      name:
        example: Premium
        type: string
      startDate:
        example: "2025-01-01"
        type: string
    type: object
  dto.ToggleUserActiveRequest:
    properties:
      active:
        type: boolean
    type: object
  dto.UserResponse:
    properties:
      created_at:
        type: string
      email:
        type: string
      first_name:
        type: string
      id:
        type: integer
      last_name:
        type: string
      role:
        type: string
    type: object
info:
  contact: {}
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      parameters:
      - description: Login credentials
        in: body
        name: loginRequest
        required: true
        schema:
          $ref: '#/definitions/dto.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.LoginResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/dto.Error'
      summary: User login with captcha
      tags:
      - user
  /users:
    get:
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Page size
        in: query
        name: size
        type: integer
      - description: Filter by name
        in: query
        name: name
        type: string
      - description: Filter by email
        in: query
        name: email
        type: string
      - description: Filter by phone
        in: query
        name: phone
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ListUsersResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/dto.Error'
      summary: Get list of users (paginated + filter)
      tags:
      - user
    post:
      consumes:
      - application/json
      parameters:
      - description: User object
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.CreateUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.UserResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/dto.Error'
      summary: Create new user
      tags:
      - user
  /users/{id}:
    get:
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UserResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/dto.Error'
      summary: Get user by ID
      tags:
      - user
    patch:
      consumes:
      - application/json
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: Activation status
        in: body
        name: active
        required: true
        schema:
          $ref: '#/definitions/dto.ToggleUserActiveRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Status updated
          schema:
            type: string
        default:
          description: ""
          schema:
            $ref: '#/definitions/dto.Error'
      summary: Activate/Deactivate user account
      tags:
      - user
    put:
      consumes:
      - application/json
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: User object
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.UserResponse'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UserResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/dto.Error'
      summary: Update user info
      tags:
      - user
  /users/{id}/plans:
    get:
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.PlanResponse'
            type: array
        default:
          description: ""
          schema:
            $ref: '#/definitions/dto.Error'
      summary: Get active plans of a user
      tags:
      - plan
    post:
      consumes:
      - application/json
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: Plan object
        in: body
        name: plan
        required: true
        schema:
          $ref: '#/definitions/dto.PlanResponse'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.PlanResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/dto.Error'
      summary: Assign new plan to user
      tags:
      - plan
  /users/{id}/plans/{planId}/renew:
    post:
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: Plan ID
        in: path
        name: planId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Plan renewed
          schema:
            type: string
        default:
          description: ""
          schema:
            $ref: '#/definitions/dto.Error'
      summary: Renew a user's plan
      tags:
      - plan
swagger: "2.0"
