openapi: 3.0.0
info:
  title: Arcaptcha Internship Project API
  version: v1.0.0
  description: >
    API for managing users and plans (User Service + User-Plan Service).
servers:
  - url: http://localhost:8080/api/v1
    description: Local server

tags:
  - name: user
    description: Everything about user service
    externalDocs:
      description: Find out more
      url: https://swagger.io
  - name: plan
    description: Everything about plan service

paths:
  /auth/login:
    post:
      tags:
        - user
      summary: User login with captcha
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
                captchaToken:
                  type: string
      responses:
        '200':
          description: Successful login
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /users:
    get:
      tags:
        - user
      summary: Get list of users (paginated + filter)
      parameters:
        - name: page
          in: query
          schema:
            type: integer
        - name: size
          in: query
          schema:
            type: integer
        - name: name
          in: query
          schema:
            type: string
        - name: email
          in: query
          schema:
            type: string
        - name: phone
          in: query
          schema:
            type: string
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedUsers'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      tags:
        - user
      summary: Create new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: User created
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /users/{id}:
    get:
      tags:
        - user
      summary: Get user by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User details
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      tags:
        - user
      summary: Update user info
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: User updated
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    patch:
      tags:
        - user
      summary: Activate/Deactivate user account
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                active:
                  type: boolean
      responses:
        '200':
          description: Status updated
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /users/{id}/plans:
    get:
      tags:
        - plan
      summary: Get active plans of a user
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: List of active plans
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      tags:
        - plan
      summary: Assign new plan to user
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Plan'
      responses:
        '201':
          description: Plan assigned
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /users/{id}/plans/{planId}/renew:
    post:
      tags:
        - plan
      summary: Renew a user's plan
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
        - in: path
          name: planId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Plan renewed
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        email:
          type: string
        phone:
          type: string
        active:
          type: boolean
    Plan:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        startDate:
          type: string
          format: date
        endDate:
          type: string
          format: date
    PaginatedUsers:
      type: object
      properties:
        users: 
          type: array
          items:
            $ref: '#/components/schemas/User'
        page: 
          type: integer
          format: int64
        size:
          type: integer
          format: int64
    Error:
      type: object
      properties:
        code:
          type: integer
          format: int64
        message:
          type: string
      required:
        - code
        - message
